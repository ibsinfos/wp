<?php
/**
* Plugin Name: Dynamic Stock Charts
* Plugin URI: http://webthegap.com/widgets/dynamic-stock-charts/
* Description: This plugin allows allows embedding highly customizable dynamic stock charts of almost any publicly traded company into your WordPress website by using simple HTML snippets automatically generated by the included charts builder. Usage: 1) Enable plugin 2) Run chart builder and get HTML snippet code 3) Insert HTML snippet code into page, post or sidebar.
* Version: 1.2
* Author: WebTheGap - Professional Web Development Services
* Author URI: http://webthegap.com
*
*/
if (!defined('ABSPATH')) die('Direct access denied');

function load_dsc_assets() {
  wp_enqueue_style('dsc-css', plugin_dir_url(__FILE__).'css/dsc-style.css');
  wp_enqueue_script('dsc-google-jsapi', '//www.google.com/jsapi');
  wp_enqueue_script('dsc-js', plugin_dir_url(__FILE__).'js/dynamic-stock-charts.min.js', array ('jquery'), '1.1', FALSE);
}

function add_chart_builder_link($links) {
  $link = '<a href="'.plugin_dir_url(__FILE__).'stock-chart-builder/builder.html" target="_blank">Stock Chart Builder</a>';
  array_unshift($links, $link);
  return $links;
}

add_action('wp_enqueue_scripts', 'load_dsc_assets');
add_action('widgets_init',
  create_function('', 'return register_widget("DynamicStockCharts_Widget");')
);
add_filter('plugin_action_links_'.plugin_basename(__FILE__), 'add_chart_builder_link');



/**
* DynamicStockCharts_Widget widget.
*/
class DynamicStockCharts_Widget extends WP_Widget {
  /**
  * Register widget with WordPress.
  */
  function __construct() {
    parent::__construct(
      'SM_Widget', // Base ID
      __('Dynamic Stock Charts'), // Name
      array('description' => __('Display stock charts based on provided HTML snippet')) // Args
    );
  } 

  /**
  * Back-end widget form.
  *
  * @see WP_Widget::form()
  *
  * @param array $instance Previously saved values from database.
  */
  public function form($instance) {
    $title = isset($instance['title']) ? $instance['title'] : __('Stock chart for...');
    $widget_markup = isset($instance['widget_markup']) ? $instance['widget_markup'] : '';
    
    ?>
    <p>
      <label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>
      <input class="widefat" type="text" id="<?php echo $this->get_field_id('title');?>" name="<?php echo $this->get_field_name('title');?>" value="<?php echo esc_attr($title); ?>">
    </p>
    <p>
      <label for="<?php echo $this->get_field_id('widget_markup'); ?>"><?php _e('Stock chart HTML Markup:'); ?></label>
      <textarea rows="20" class="widefat" id="<?php echo $this->get_field_id('widget_markup'); ?>" name="<?php echo $this->get_field_name('widget_markup'); ?>"><?php echo esc_attr($widget_markup); ?></textarea>
    </p>
    <?php
  }
  /**
  * Sanitize widget form values as they are saved.
  *
  * @see WP_Widget::update()
  *
  * @param array $new_instance Values just sent to be saved.
  * @param array $old_instance Previously saved values from database.
  *
  * @return array Updated safe values to be saved.
  */
  public function update($new_instance, $old_instance) {
    $instance = array();
    $instance['title'] = !empty($new_instance['title']) ? strip_tags($new_instance['title']) : '';
    $instance['widget_markup'] = !empty($new_instance['widget_markup']) ? $new_instance['widget_markup'] : '';
    return $instance;
  }
  
  /**
   * Front-end display of widget.
   *
   * @see WP_Widget::widget()
   *
   * @param array $args Widget arguments.
   * @param array $instance Saved values from database.
   */
  public function widget($args, $instance) {
    echo $args['before_widget'];
    
    if (!empty( $instance['title'])) {
      echo $args['before_title'] . apply_filters('widget_title', $instance['title']). $args['after_title'];
    }
    
    if (!empty( $instance['widget_markup'])) {
      echo $instance['widget_markup'];
    }
    
    echo $args['after_widget'];
  }  
}